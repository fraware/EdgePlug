version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: edgeplug-marketplace-db
    environment:
      POSTGRES_DB: edgeplug_marketplace
      POSTGRES_USER: edgeplug
      POSTGRES_PASSWORD: edgeplug_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U edgeplug -d edgeplug_marketplace"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - edgeplug-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: edgeplug-marketplace-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - edgeplug-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: edgeplug-marketplace-storage
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - edgeplug-network

  # EdgePlug Marketplace Backend
  marketplace:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: edgeplug-marketplace-api
    environment:
      EDGEPLUG_DATABASE_HOST: postgres
      EDGEPLUG_DATABASE_PORT: 5432
      EDGEPLUG_DATABASE_USER: edgeplug
      EDGEPLUG_DATABASE_PASSWORD: edgeplug_password
      EDGEPLUG_DATABASE_DBNAME: edgeplug_marketplace
      EDGEPLUG_REDIS_HOST: redis
      EDGEPLUG_REDIS_PORT: 6379
      EDGEPLUG_STORAGE_TYPE: minio
      EDGEPLUG_STORAGE_MINIO_ENDPOINT: minio:9000
      EDGEPLUG_STORAGE_MINIO_ACCESS_KEY_ID: minioadmin
      EDGEPLUG_STORAGE_MINIO_SECRET_ACCESS_KEY: minioadmin
      EDGEPLUG_STORAGE_MINIO_BUCKET: edgeplug-marketplace
      EDGEPLUG_JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      EDGEPLUG_LOGGING_LEVEL: info
    ports:
      - "8080:8080"
      - "9090:9090"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - edgeplug-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: edgeplug-marketplace-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - edgeplug-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: edgeplug-marketplace-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - edgeplug-network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  edgeplug-network:
    driver: bridge 